#+TITLE:  threaded-code-interpreter in js
#+AUTHOR: 謝宇恆 / XIE Yuheng
#+PROPERTY: tangle threaded-code-interpreter.js

* helper

*** header

    #+begin_src js
    "use strict";
    #+end_src

* interpreter

*** memory

    #+begin_src js
    let cell = 4;
    // unit byte
    // this global value should match the following interface

    let memory = {};

    memory.size = 64 * 1024 * 1024;
    memory.array_buffer = new ArrayBuffer(memory.size);
    memory.dataview = new DataView(memory.array_buffer);
    memory.current_free_address = 0;

    memory.get =
        function (index) {
            return memory.dataview.getUint32(index);
        };
    memory.set =
        function (index, value) {
            memory.dataview.setUint32(index, value);
        };
    memory.get_byte =
        function (index) {
            return memory.dataview.getUint8(index);
        };
    memory.set_byte =
        function (index, value) {
            memory.dataview.setUint8(index, value);
        };
    memory.allocate =
        function (size) {
            let return_address = memory.current_free_address;
            memory.current_free_address = return_address + size;
            return return_address;
        };

    // memory.set(1, 231);
    // memory.get(1);
    // memory.allocate(16);
    // memory.current_free_address;
    #+end_src

*** stack

***** argument-stack

      #+begin_src js
      memory.allocate(1024);
      // 1k safe underflow

      let argument_stack = {};
      argument_stack.address = memory.allocate(1 * 1024 * 1024);
      argument_stack.current_free_address = argument_stack.address;

      argument_stack.push =
          function (value) {
              memory.set(argument_stack.current_free_address, value);
              argument_stack.current_free_address =
                  argument_stack.current_free_address + cell;
          };

      argument_stack.pop =
          function () {
              argument_stack.current_free_address =
                  argument_stack.current_free_address - cell;
              return memory.get(argument_stack.current_free_address);
          };

      argument_stack.tos =
          function () {
              return memory.get(argument_stack.current_free_address - cell);
          };
      #+end_src

***** return-stack

      #+begin_src js
      memory.allocate(1024);
      // 1k safe underflow

      let return_stack = {};
      return_stack.address = memory.allocate(1 * 1024 * 1024);
      return_stack.current_free_address = return_stack.address;

      return_stack.push =
          function (value) {
              memory.set(return_stack.current_free_address, value);
              return_stack.current_free_address =
                  return_stack.current_free_address + cell;
          };

      return_stack.pop =
          function () {
              return_stack.current_free_address =
                  return_stack.current_free_address - cell;
              return memory.get(return_stack.current_free_address);
          };

      return_stack.tos =
          function () {
              return memory.get(return_stack.current_free_address - cell);
          };
      #+end_src

* in-line definition

*** primitive-function-record

    #+begin_src js
    let primitive_function_record = {};

    // primitive_function_record.size = 4 * 1024;
    // primitive_function_record.map = new Array(primitive_function_record.size);

    primitive_function_record.counter = 0;
    primitive_function_record.map = new Map();

    primitive_function_record.get =
        function (index) {
            return primitive_function_record.map.get(index);
        };

    primitive_function_record.set =
        function (index, fun) {
            return primitive_function_record.map.set(index, fun);
        };

    let create_primitive_function =
        function (fun) {
            let return_address = primitive_function_record.counter;
            primitive_function_record
                .set(primitive_function_record.counter, fun);
            primitive_function_record.counter =
                primitive_function_record.counter + 1;
            return return_address;
        };
    #+end_src

*** next

    #+begin_src js
    var next_explainer_argument = 0;

    let next =
        function () {
            let function_body = return_stack.pop();
            let next_function_body = function_body + cell;
            let explainer = memory.get(memory.get(function_body));
            return_stack.push(next_function_body);
            next_explainer_argument = memory.get(function_body) + cell;
            primitive_function_record.get(explainer).call();
        };
    #+end_src

*** in-host-tag-hash-table

    - a clean tag space for threaded-code-interpreter
      used by in-host non-primitive-function

    #+begin_src js
    let in_host_tag_hash_table = new Map();
    #+end_src

*** data & mark

    #+begin_src js
    let data =
        function (value) {
            memory.set(memory.current_free_address, value);
            memory.current_free_address =
                memory.current_free_address + cell;
        };

    let mark =
        function (tag_string) {
            in_host_tag_hash_table
                .set(tag_string, memory.current_free_address);
        };
    #+end_src

*** link

    #+begin_src js
    let link = 0;
    #+end_src

*** primitive-function

    #+begin_src js
    let primitive_function_explainer =
        create_primitive_function(
            function () {
                primitive_function_record.get(
                    memory.get(next_explainer_argument)
                ).call();
            });

    let define_primitive_function =
        function (tag_string, fun) {
            let function_index = create_primitive_function(fun);
            data(link);
            link = memory.current_free_address - cell;
            mark(tag_string);
            data(primitive_function_explainer);
            data(function_index);
        };
    #+end_src

*** function

    #+begin_src js
    let function_explainer =
        create_primitive_function(
            function () {
                return_stack.push(next_explainer_argument);
                next();
            });

    let define_function =
        function (tag_string, function_tag_string_array) {
            data(link);
            link = memory.current_free_address - cell;
            mark(tag_string);
            data(function_explainer);
            function_tag_string_array.forEach(
                function (function_tag_string) {
                    data(in_host_tag_hash_table.get(function_tag_string));
                }
            );
        };
    #+end_src

*** variable

    #+begin_src js
    let variable_explainer =
        create_primitive_function(
            function () {
                argument_stack.push(
                    (memory.get(next_explainer_argument)));
                next();
            });

    let define_variable =
        function (tag_string, value) {
            data(link);
            link = memory.current_free_address - cell;
            mark(tag_string);
            data(variable_explainer);
            data(value);
        };
    #+end_src

* primitive-function

*** ending

***** end
      #+begin_src js
      define_primitive_function(
          "end",
          function () {
              return_stack.pop();
              next();
          }
      );
      #+end_src

*** io

***** print-tos

      #+begin_src js
      define_primitive_function(
          "print-tos",
          function () {
              console.log(argument_stack.pop());
              next();
          }
      );
      #+end_src

* play

*** little-test

    #+begin_src js
    define_variable("*little-test-number*", 233);

    define_primitive_function(
        "bye",
        function () {
            console.log("bye bye ^-^/");
        }
    );

    define_function(
        "little-test",
        [ "*little-test-number*",
          "print-tos",
          "bye"
        ]
    );

    define_function(
        "first-function",
        [ "little-test",
          "end"
        ]
    );

    let function_body_for_little_test =
        in_host_tag_hash_table.get("first-function")
        + cell;
    #+end_src

*** begin-to-interpret-threaded-code

    #+begin_src js
    let begin_to_interpret_threaded_code =
        function () {
            return_stack.push(function_body_for_little_test);
            next();
        };

    begin_to_interpret_threaded_code();
    #+end_src
